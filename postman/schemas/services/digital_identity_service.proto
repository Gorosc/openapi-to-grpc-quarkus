/*
  Digital Identity Management

  ## TMF API Reference: TMF720 - Digital Identity Management  ### Version 4.0. - January 2021   Digital Identity Management API goal is to provide the ability to manage a digital identity. This digital identity allows to identify an individual, a resource, or a partyRole (a specific role - or set of roles - for a given individual). A digital identity is associated with credential/authentification method. These credential/authentification methods should be extensible to describe all type of authentification method like login/password, biometric, token, etc.. A contact medium is also associated with digital identity (or directly at credential level) to manage credential recovery UCs.

  The version of the OpenAPI document: 4.0.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.digitalidentityservice;

import "google/protobuf/empty.proto";
import public "../models/digital_identity.proto";
import public "../models/digital_identity_create.proto";
import public "../models/digital_identity_update.proto";
import public "../models/error.proto";

service DigitalIdentityService {
  rpc CreateDigitalIdentity (CreateDigitalIdentityRequest) returns (DigitalIdentity);

  rpc DeleteDigitalIdentity (DeleteDigitalIdentityRequest) returns (google.protobuf.Empty);

  rpc ListDigitalIdentity (ListDigitalIdentityRequest) returns (ListDigitalIdentityResponse);

  rpc PatchDigitalIdentity (PatchDigitalIdentityRequest) returns (DigitalIdentity);

  rpc RetrieveDigitalIdentity (RetrieveDigitalIdentityRequest) returns (DigitalIdentity);

}

message CreateDigitalIdentityRequest {
  // The DigitalIdentity to be created
  DigitalIdentityCreate digitalIdentity = 1;

}

message DeleteDigitalIdentityRequest {
  // Identifier of the DigitalIdentity
  string id = 1;

}

message ListDigitalIdentityRequest {
  // Comma-separated properties to be provided in response
  string fields = 1;
  // Requested index for start of resources to be provided in response
  int32 offset = 2;
  // Requested number of resources to be provided in response
  int32 limit = 3;

}

message ListDigitalIdentityResponse {
  repeated DigitalIdentity data = 1;
}

message PatchDigitalIdentityRequest {
  // Identifier of the DigitalIdentity
  string id = 1;
  // The DigitalIdentity to be updated
  DigitalIdentityUpdate digitalIdentity = 2;

}

message RetrieveDigitalIdentityRequest {
  // Identifier of the DigitalIdentity
  string id = 1;
  // Comma-separated properties to provide in response
  string fields = 2;

}

